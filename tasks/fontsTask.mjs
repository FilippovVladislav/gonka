import fs from 'fs';
import path from 'path';
import gulp from 'gulp';
import rename from 'gulp-rename';
import { reloadBrowser } from './serveTask.mjs';

const fontsDir = path.resolve('src/fonts');
const distFontsDir = path.resolve('dist/fonts');
const scssFile = path.resolve('src/scss/base/_fonts.scss');

function createFontsDir() {
    if (!fs.existsSync(distFontsDir)) {
        fs.mkdirSync(distFontsDir, { recursive: true });
        console.log('‚úÖ –ü–∞–ø–∫–∞ dist/fonts —Å–æ–∑–¥–∞–Ω–∞');
    }
}

function createScssFile() {
    fs.writeFileSync(scssFile, '', 'utf8'); // –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    console.log('‚úÖ –§–∞–π–ª _fonts.scss –æ—á–∏—â–µ–Ω/—Å–æ–∑–¥–∞–Ω');
}

function getFontWeight(fontName) {
    const name = fontName.toLowerCase();
    if (name.includes('extrabold') || name.includes('heavy')) return 800;
    if (name.includes('black')) return 900;
    if (name.includes('semibold') || name.includes('demibold')) return 600;
    if (name.includes('bold')) return 700;

    if (name.includes('medium')) return 500;
    if (name.includes('regular') || name.includes('normal')) return 400;
    if (name.includes('light')) return 300;
    if (name.includes('extralight') || name.includes('ultralight')) return 200;
    if (name.includes('thin')) return 100;
    return 400; // default
}

function getBaseFontName(fullName) {
    return fullName.split('-')[0]; // Roboto-Bold ‚Üí Roboto
}

function removeTTFfromDist() {
    const files = fs.readdirSync(distFontsDir);
    for (const file of files) {
        if (file.endsWith('.ttf')) {
            fs.unlinkSync(path.join(distFontsDir, file));
            console.log(`üóë –£–¥–∞–ª—ë–Ω –ª–∏—à–Ω–∏–π —Ñ–∞–π–ª: ${file}`);
        }
    }
}

export async function fontsTask() {
    createFontsDir();
    createScssFile();

    const files = fs.readdirSync(fontsDir);
    const fontFiles = files.filter(file => file.endsWith('.ttf'));

    if (fontFiles.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç TTF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
    }

    let scssContent = '';
    const addedFonts = new Set(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤

    const ttf2woff2 = (await import('ttf2woff2')).default;

    const copyFontPromises = fontFiles.map((file) => {
        const fontPath = path.join(fontsDir, file);
        const fontName = path.basename(file, path.extname(file));
        const baseFontName = getBaseFontName(fontName);
        const fontWeight = getFontWeight(fontName);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —à—Ä–∏—Ñ—Ç–∞
        const fontKey = `${baseFontName}-${fontWeight}-${path.extname(file)}`;
        if (addedFonts.has(fontKey)) {
            console.log(`‚ö†Ô∏è –®—Ä–∏—Ñ—Ç ${baseFontName} —Å –≤–µ—Å–æ–º ${fontWeight} –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ${path.extname(file)} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
            return Promise.resolve(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        }

        addedFonts.add(fontKey); // –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –≤ –Ω–∞–±–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º

        console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${fontName} ‚Üí ${baseFontName}, –≤–µ—Å: ${fontWeight}, —Ñ–æ—Ä–º–∞—Ç: TTF`);

        return new Promise((resolve, reject) => {
            // –ö–æ–ø–∏—Ä—É–µ–º .ttf —Ñ–∞–π–ª
            gulp.src(fontPath)
                .pipe(gulp.dest(distFontsDir))
                .on('end', () => {
                    console.log(`‚úÖ –®—Ä–∏—Ñ—Ç ${fontName}.ttf —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ttf –≤ .woff
                    gulp.src(fontPath)
                        .pipe(rename({ extname: '.woff' }))
                        .pipe(gulp.dest(distFontsDir))
                        .on('end', () => {
                            console.log(`‚úÖ –®—Ä–∏—Ñ—Ç ${fontName}.woff —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);

                            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ttf –≤ .woff2
                            const woff2Buffer = ttf2woff2(fs.readFileSync(fontPath));
                            fs.writeFileSync(path.join(distFontsDir, `${fontName}.woff2`), woff2Buffer);
                            console.log(`‚úÖ –®—Ä–∏—Ñ—Ç ${fontName}.woff2 —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`);

                            resolve();
                        })
                        .on('error', (err) => {
                            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${fontName}.woff:`, err);
                            reject(err);
                        });
                })
                .on('error', (err) => {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${fontName}.ttf:`, err);
                    reject(err);
                });
        }).then(() => {
            // SCSS
            const fontFace = `@font-face {\n` +
                `  font-family: '${baseFontName}';\n` +
                `  src: url('../fonts/${fontName}.woff2') format('woff2'),\n` +
                `       url('../fonts/${fontName}.woff') format('woff');\n` +
                `  font-weight: ${fontWeight};\n` +
                `  font-style: normal;\n` +
                `  font-display: swap;\n` +
                `}\n\n`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∂–µ @font-face
            if (!scssContent.includes(fontFace)) {
                scssContent += fontFace;
            }
        });
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await Promise.all(copyFontPromises);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SCSS –≤ —Ñ–∞–π–ª
    fs.writeFileSync(scssFile, scssContent, 'utf8');
    removeTTFfromDist();

    console.log('‚úÖ –®—Ä–∏—Ñ—Ç—ã —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ SCSS —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω');
    reloadBrowser(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
}
